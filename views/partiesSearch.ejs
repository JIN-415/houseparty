<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>파티 찾기</title>
    <link
      rel="shortcut icon"
      type="image/x-icon"
      href="https://cdn-icons-png.flaticon.com/512/1395/1395020.png"
    />
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <link
      rel="canonical"
      href="https://getbootstrap.com/docs/5.3/examples/album/"
    />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-4bw+/aepP/YC94hEpVNVgiZdgIC5+VKNBQNGCHeKRQN+PtmoHDEXuppvnDJzQIu9"
      crossorigin="anonymous"
    />
  </head>
  <body>
    <%- include('./static/topBar') %>

    <link rel="stylesheet" href="/public/css/partiesSearch.css" />

    <div class="album py-5 bg-body-tertiary">
      <div class="container">
        <form class="searchForm" id="searchForm">
          <div class="search">
            <input
              id="searchInput"
              class="form-control me-2"
              type="search"
              placeholder="원하는 파티를 찾아보세요."
              aria-label="Search"
            />
            <button
              class="btn btn-outline-success"
              type="button"
              id="searchButton"
              onclick="searchFunc()"
            >
              <img src="/public/img/search.svg" alt="" />
            </button>
          </div>
        </form>
        <div class="tag">
          <% for (let i = 0; i < allTags.length; i++){ %>
          <button
            class="tagButton"
            id="tagButton"
            value="<%= allTags[i].tag_name %>"
            onclick="tagSearchFunc(`<%= allTags[i].tag_name %>`)"
          >
            <%= allTags[i].tag_name %>
          </button>
          <% } %>
        </div>
        <div class="row" style="margin-top: 10px">
          <div
            id="partyLength"
            data-value="<%=parties.length%>"
            style="height: 30px; width: 61vw"
          >
            총 <%=parties.length%> 개 파티
          </div>
          <% for (let i = 0; i < parties.length; i++) { %>
          <div class="col-md-4">
            <div
              class="card shadow-sm hidden party-card"
              id="<%=i+1%>"
              data-value="<%=parties[i].party_num%>"
              data-value2="<%=parties[i].id%>"
            >
              <% if (parties[i].images && parties[i].images.length > 0) { %>
              <img
                src="<%=parties[i].images[0].img_URL%>"
                width="100%"
                height="225px"
              />
              <% } else { %>
              <svg
                class="bd-placeholder-img card-img-top"
                width="100%"
                height="225"
                xmlns="http://www.w3.org/2000/svg"
                role="img"
                aria-label="Placeholder: Thumbnail"
                preserveAspectRatio="xMidYMid slice"
                focusable="false"
              >
                <title>Placeholder</title>
                <rect width="100%" height="100%" fill="#55595c"></rect>
                <text x="50%" y="50%" fill="#eceeef" dy=".3em">사진</text>
              </svg>
              <% } %>

              <div class="card-body">
                <div class="titleTags">
                  <p class="card-title"><%= parties[i].title %></p>
                  <div class="card-tags">
                    <% parties[i].tags.forEach((tag) => { %>
                    <div class="tags"><%= tag.tag_name %></div>
                    <% }); %>
                  </div>
                </div>
                <div class="d-flex justify-content-between align-items-center">
                  <div class="btn-group">
                    <img
                      src="/public/img/time.svg"
                      alt=""
                      style="width: 15px"
                    />
                    <h6><%= parties[i].start_time %></h6>
                  </div>
                  <% const createdAt = new Date(parties[i].createdAt); const
                  currentDate = new Date(); const timeDifference = currentDate -
                  createdAt; if(timeDifference < 60 * 1000){ //1분 미만인 경우
                  const secondsAgo = Math.floor(timeDifference/1000); %>
                  <small class="text-body-secondary"
                    ><%= secondsAgo %>초전</small
                  >
                  <% } else if(timeDifference < 60 * 60 * 1000){ const
                  minutesAgo = Math.floor(timeDifference / (60*1000)); %>
                  <small class="text-body-secondary"
                    ><%= minutesAgo %>분전</small
                  >
                  <% } else if(timeDifference < 24 * 60 * 60 *1000){ const
                  hoursAgo = Math.floor(timeDifference / (60*60*1000)); %>
                  <small class="text-body-secondary"
                    ><%= hoursAgo %>시간전</small
                  >
                  <% } else{ const daysAgo = Math.floor(timeDifference / (24 *
                  60 * 60 * 1000)); %>
                  <small class="text-body-secondary"><%= daysAgo %>일전</small>
                  <% } %>
                </div>
              </div>
            </div>
          </div>
          <% } %>
        </div>
      </div>
    </div>
    <div>
      <button
        type="button"
        id="writeButton"
        class="writeButton"
        onclick="writeFunc()"
      >
        <span>파티 열기</span>
      </button>
    </div>

    <script>
      // URL에서 파라미터 값을 가져오는 함수
      function getParameterByName(name, url) {
        if (!url) url = window.location.href;
        name = name.replace(/[\[\]]/g, "\\$&");
        const regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)");
        const results = regex.exec(url);
        if (!results) return null;
        if (!results[2]) return "";
        return decodeURIComponent(results[2].replace(/\+/g, " "));
      }

      // URL에서 'tag' 파라미터 값을 읽어옴
      const tagParam = getParameterByName("q");

      sessionStorage.removeItem("selectedTags");
      //태그 파라미터를 쉽표로 나누어 배열로 변환
      let selectedTags = tagParam ? tagParam.split(",") : [];

      //세션스토리지 초기화
      //'tag' 파라미터 값을 세션에 저장.
      sessionStorage.setItem("selectedTags", JSON.stringify(selectedTags));

      // 모든 태그 버튼을 선택
      const tagButtons = document.querySelectorAll(".tagButton");

      // 'tag' 파라미터와 일치하는 값을 가진 태그 버튼에 스타일 적용
      tagButtons.forEach((button) => {
        const tagValue = button.getAttribute("value");
        if (selectedTags.includes(tagValue)) {
          button.classList.add("selected");
        }
      });

      //검색어 유지하기
      const searchInput = document.getElementById("searchInput");
      const searchItem = localStorage.getItem("searchItem");
      searchInput.value = searchItem;

      async function tagSearchFunc(tag) {
        console.log(tag);
        const selectedTagsStr = sessionStorage.getItem("selectedTags");
        //새로운 배열 생성
        selectedTags = selectedTagsStr ? JSON.parse(selectedTagsStr) : [];
        if (selectedTags.includes(tag)) {
          selectedTags = selectedTags.filter(
            (selectedTags) => selectedTags !== tag
          );
        } else {
          selectedTags.push(tag);
        }

        sessionStorage.setItem("selectedTags", JSON.stringify(selectedTags));
        console.log(selectedTags);
        try {
          const res = await axios({
            method: "get",
            url: `/partiesSearch?q=${selectedTags.join(",")}`,
            data: selectedTags.join(","),
          }).then((res) => {
            sessionStorage.setItem(
              "selectedTags",
              JSON.stringify(selectedTags)
            );
            console.log("res", res);
            location.href = `/partiesSearch?q=${res.config.data}`;
          });
        } catch (error) {
          console.log(err);
        }
      }
      async function searchFunc() {
        const searchValue = document.getElementById("searchInput").value;
        console.log(searchValue);
        sessionStorage.setItem("seachItem", searchValue);
        localStorage.setItem("searchItem", searchValue);

        //선택된 태그 배열 가져오기
        const selectedTagsStr = sessionStorage.getItem("selectedTags");
        const searchItemStr = sessionStorage.getItem("seachItem");

        //JSON 문자열 파싱하여 배열로 변환
        const selectedTags = selectedTagsStr ? JSON.parse(selectedTagsStr) : [];
        const searchItem = searchItemStr ? searchItemStr : [];

        //만약 검색어가 이미 있으면 삭제시키기(값이 2개 이상일 때 맨 앞 값 삭제 )
        const selectedTagsOn = document.querySelectorAll(".tagButton.selected");
        if ((selectedTagsOn.length = 0)) {
          selectedTags.remove();
        } else {
          selectedTags.shift();
        }
        //두 배열 합침(검색어를 제일 처음 배열로 저장)
        const find = [searchItemStr, ...selectedTags].filter(Boolean);

        sessionStorage.setItem("find", find);

        try {
          const res = await axios({
            method: "get",
            url: `/partiesSearch?q=${find.join(",")}`,
            data: find.join(","),
          }).then((res) => {
            console.log("res", res);
            location.href = `/partiesSearch?q=${res.config.data}`;
          });
        } catch (err) {
          console.log(err);
        }
        //입력값 비우기
        searchInput.value = searchValue;
        sessionStorage.removeItem("seachItem");
      }
      function writeFunc() {
        location.href = `/parties/host`;
      }

      //파티카드 누르면 해당파티 상세페이지로 이동
      const partyLength = document.getElementById("partyLength");
      for (let i = 0; i < partyLength.dataset.value; i++) {
        const cardLink = document.getElementById(`${i + 1}`);
        cardLink.addEventListener("click", () => {
          console.log(cardLink.dataset.value);
          console.log(cardLink.dataset.value2);
          window.location.href = `/parties/${cardLink.dataset.value}/${cardLink.dataset.value2}`;
        });
      }
    </script>
  </body>
</html>
