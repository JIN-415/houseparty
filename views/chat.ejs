<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>채팅</title>
    <link
      rel="shortcut icon"
      type="image/x-icon"
      href="https://cdn-icons-png.flaticon.com/512/1395/1395020.png"
    />
    <script src="/socket.io/socket.io.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <!-- 아이콘 링크 -->
    <script
      src="https://kit.fontawesome.com/3191b0c349.js"
      crossorigin="anonymous"
    ></script>
    <link
      rel="canonical"
      href="https://getbootstrap.com/docs/5.3/examples/album/"
    />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-4bw+/aepP/YC94hEpVNVgiZdgIC5+VKNBQNGCHeKRQN+PtmoHDEXuppvnDJzQIu9"
      crossorigin="anonymous"
    />
    <!-- <link rel="stylesheet" href="/public/css/main.css" /> -->
    <style>
      /* ( 크롬, 사파리, 오페라, 엣지 ) 동작 */
      #msg::-webkit-scrollbar {
        display: none;
      }
      #body::-webkit-scrollbar {
        display: none;
      }
      #main::-webkit-scrollbar {
        display: none;
      }
      /* 스크롤바 생성 */
      #msg {
        margin-top: 5px;
        height: 81%;
        overflow-y: scroll;
      }
      #main {
        height: 78vh;
        width: 80%;
        overflow-y: scroll;
        margin-left: 5px;
      }
      #body {
        margin-top: 5px;
        width: 69vw;
        max-width: 800px;
        height: 78vh;
        position: relative;
        background: #7d8d86;
        overflow-y: scroll;
        margin-left: 5px;
        border: none;
        border-radius: 10px;
      }
      #chat {
        position: absolute;
        bottom: 0px;
        display: flex;
        justify-content: space-around;
        width: 100%;
        height: 40px;
        margin-bottom: 3px;
      }
      #chat input {
        width: 80%;
      }
      #invite {
        width: 8%;
        text-align: center;
        font-size: 10px;
        margin-left: 5px;
        margin-right: 5px;
      }
      #chatFormButton {
        width: 8%;
        font-size: 17px;
        padding-right: 25px;
      }
      .my-chat {
        display: flex;
        justify-content: end;
        padding: 2px 0px;
      }
      .my-chat p {
        margin: 0;
        padding: 10px;
        background: yellow;
        border-radius: 10px;
        margin-right: 10px;
      }
      .other-chat {
        display: flex;
        justify-content: start;
        padding: 2px 0px;
      }
      .other-chat p {
        margin: 0;
        padding: 10px;
        background: white;
        border-radius: 10px;
        margin-left: 10px;
      }
      #notice {
        display: flex;
        flex-direction: column;
        text-align: center;
        color: rgb(211, 210, 229);
      }
      #notice p {
        margin: 0;
      }
      .secret-chat p {
        background: pink;
      }
      #lists li {
        margin-top: 20px;
        display: flex;
        align-items: center;
        border-bottom: solid 1px black;
        padding-bottom: 20px;
        height: 13vh;
        margin-right: 22px;
      }
      #lists button {
        width: 80px;
      }
      #lists span {
        height: 25px;
        margin-right: 10px;
      }
      #album {
        height: 85vh;
      }
      #messages span {
        font-size: x-small;
        display: grid;
        place-items: end;
        margin-bottom: 3px;
        margin-left: 6px;
        margin-right: 6px;
      }
      #chatProfile {
        width: 50px;
        height: 50px;
        border-radius: 50%;
        background-color: beige;
        text-align: center;
        font-size: medium;
        margin-left: 8px;
      }
      #chatListProfile {
        width: 10vw;
        max-width: 100px;
        height: 10vw;
        max-height: 100px;
        border-radius: 50%;
        background-color: beige;
        text-align: center;
      }
      #userTitle {
        display: flex;
        margin-top: 10px;
      }
      #participantNum {
        border-radius: 40%;
        opacity: 40%;
      }
      #full {
        width: 86%;
        justify-content: space-around;
        background-color: white;
        margin-left: 7%;
      }
      @media screen and (max-width: 800px) {
        #full {
          flex-direction: column;
          align-items: center;
          width: 86vw;
        }
        #partymain {
          width: 81%;
        }
        #chatmain {
          width: 70%;
          margin-right: 10%;
          display: flex;
          align-items: center;
          flex-direction: column;
        }
      }
      @media screen and (min-width: 800px) {
        #partymain {
          height: 78vh;
          width: 30%;
          margin-left: 5px;
        }
        #chatmain {
          width: 70%;
        }
        #userTitle {
          display: flex;
          padding-left: 2rem;
        }
      }
      a:hover {
        color: black;
        text-decoration: underline;
      }
    </style>
  </head>
  <body style="margin-bottom: 50px">
    <%- include('./static/topBar') %>
    <br />

    <!-- <div id="album" class="album py-5 bg-body-tertiary"> -->
    <!-- <div class="container"> -->
    <div id="full" style="display: flex">
      <div id="partymain">
        <h2>
          <h5
            style="
              margin-top: 15px;
              font-size: medium;
              margin-left: 5px;
              font-weight: bold;
            "
          >
            참여 파티
          </h5>
        </h2>
        <ul id="myRoomTitle" class="list-group" style="margin-top: 10px"></ul>
      </div>
      <div id="main" class="chatmain">
        <h2 id="userTitle"></h2>
        <ul id="lists">
          <div style="margin-top: 10px"></div>
        </ul>
      </div>

      <div id="body" hidden>
        <div
          id="exitButton"
          style="background-color: darkgray; display: flex"
        ></div>
        <div id="msg">
          <div id="notice"></div>
          <div id="messages"></div>
          <!-- <div class="my-chat">
              <p>채팅테스트(나)</p>
          </div>
          <div class="other-chat">
              <p>채팅테스트(상대방)</p>
          </div> -->
        </div>
        <div id="chat">
          <button class="btn btn-danger" id="invite" onclick="invite()" hidden>
            초대
          </button>
          <input
            class="col-form-label"
            type="text"
            id="message"
            placeholder="메세지 입력"
          />
          <button class="btn btn-warning" id="chatFormButton">
            <i class="fa-solid fa-paper-plane"></i>
          </button>
        </div>
      </div>
    </div>

    <script>
      let socket = io();
      let userId = sessionStorage.getItem("userId");
      const partiesData = "<%= partiesNum%>";
      const partiesId = partiesData.split(",")[0];
      const partiesDataId = partiesData.split(",")[1];

      (function () {
        userId = sessionStorage.getItem("userId");
        console.log(partiesDataId);
        console.log(userId);

        document.querySelector("#userTitle").innerHTML = `<b style="
          font-size: x-large;
          font-weight: bold;
      ">${userId}</b> <h5 style="margin-top: 15px;font-size: small; margin-left: 5px;">님의 채팅목록</h5>`;
        let result1 = "";
        const local = sessionStorage.getItem("token");
        console.log(local);
        const currentUrl = window.location.href;
        console.log(currentUrl);
        if (local != null) {
          axios({
            method: "post",
            url: `/verify`,
            data: {
              token: local,
            },
          }).then((result) => {
            result1 = result;
            sessionStorage.setItem("userId", result1.data.user.id);
            console.log(result1.data.user.id);
          });
        } else {
          console.log("로그인 실패");
          alert("로그인 후 사용바랍니다.");
          location.href = "/signin";
        }
        let myRoomList = [];
        //룸리스트
        userId = sessionStorage.getItem("userId");
        console.log(userId);
        socket.emit("roomList", userId, async (roomList) => {
          console.log("roomList", roomList);
          const lists = document.querySelector("#lists");
          lists.textContent = "";
          roomList.forEach((roomList) => {
            let par = [];
            for (let i = 0; i < roomList.participant.length; i++) {
              if (
                roomList.participant[i] != userId &&
                roomList.participant[i][0] != "게"
              ) {
                par.push(roomList.participant[i]);
              }
            }

            console.log(roomList.participant.length);
            console.log(roomList);
            const li = document.createElement("li");
            if (roomList.roomName[0] == "단") {
              myRoomList.push(roomList.roomID);
              li.innerHTML = `<img src="/public/img/chat.png" alt="단체톡" id="chatListProfile"><div id="chatListdiv" class="ms-2 me-auto">
                                        <div class="fw-bold">[단톡] ${par} <span class="border border-secondary" id="participantNum">${roomList.participant_num}</span></div>
                                        <a id="a1" style="text-decoration: none;
            color: darkgray;" href="/parties/${roomList.roomID}/${roomList.participant[1]}" class="card-link">게시글 바로가기</a>
                                        </div>
                                        <button type="button" class="btn btn-danger" onclick="roomEnter('${roomList.roomName}')">입장</button>
                                      `;
              let a1 = li.querySelector("a");
              a1.addEventListener("mouseover", function () {
                // hover 시 적용할 스타일을 여기에 정의하세요
                a1.style.textDecoration = "underline";
                a1.style.color = "black";
                a1.style.fontWeight = "bold";
              });
              a1.addEventListener("mouseout", function () {
                // hover 종료 시 원래 스타일로 돌아가게 하려면
                a1.style.textDecoration = "none";
                a1.style.color = "darkgray";
              });
            } else {
              li.innerHTML = `<img src="${roomList.imgURL}" alt="${par}" id="chatListProfile"><div id="chatListdiv" class="ms-2 me-auto">
                <div class="fw-bold">[1:1] ${par}</div>
                <a style=" text-decoration: none;
            color: darkgray; margin-top: 5px;" href="/parties/${roomList.roomID}/${roomList.participant[1]}" class="card-link">게시글 바로가기</a>
              </div>
              <button type="button" class="btn btn-danger" onclick="roomEnter('${roomList.roomName}')">입장</button>
              `;
              let a1 = li.querySelector("a");
              a1.addEventListener("mouseover", function () {
                // hover 시 적용할 스타일을 여기에 정의하세요
                a1.style.textDecoration = "underline";
                a1.style.color = "black";
                a1.style.fontWeight = "bold";
              });
              a1.addEventListener("mouseout", function () {
                // hover 종료 시 원래 스타일로 돌아가게 하려면
                a1.style.textDecoration = "none";
                a1.style.color = "darkgray";
              });
            }
            // li.innerHTML = `roomName: ${roomList.roomName} 채팅상대: ${par} <button onclick="roomEnter('${roomList.roomName}')">채팅방입장</button>`;
            lists.appendChild(li);
          });

          console.log("중복 제거 룸 리스트1", myRoomList);
          const myRoomList2 = [...new Set(myRoomList)];
          console.log(myRoomList2);

          findTitle(myRoomList2);
        });

        let roomid123;

        // if (partiesDataId) {
        //   let roomName1 = "";
        //   roomName1 = `게시글번호${partiesId},${partiesDataId},${userId}`;

        //   const roomName = roomName1;
        //   const userName = userId;
        //   socket.emit(
        //     "create",
        //     roomName,
        //     userName,
        //     partiesId,
        //     partiesDataId,
        //     () => {
        //       console.log("게시글에서 채팅 넘어오는 방 생성");
        //       const main = document.querySelector("#main");
        //       const body = document.querySelector("#body");
        //       const chatListButton = document.querySelector("#chatListButton");
        //       chatListButton.hidden = false;
        //       main.hidden = true;
        //       body.hidden = false;
        //     }
        //   );
        // }
      })();
      // 우선 실행 끝

      console.log(partiesDataId);
      if (partiesDataId) {
        const roomName1 = `게시글번호${partiesId},${partiesDataId},${userId}`;
        roomEnter(roomName1);
      }

      //게시글 제목 조회 함수
      function findTitle(room) {
        console.log("게시글 제목 조회", room);
        axios({
          method: "post",
          url: `/parties/findTitle`,
          data: {
            roomID: room,
          },
        }).then((result) => {
          console.log(result.data.result);
          const myRoomTitle = document.querySelector("#myRoomTitle");
          for (let i of result.data.result) {
            const targetDate = new Date(i.dDay);
            // 현재 날짜를 구하기
            const currentDate = new Date();
            // 두 날짜 간의 시간 차이 계산 (밀리초 단위)
            const timeDiff = targetDate - currentDate;
            // 밀리초를 일로 변환
            const daysRemaining = Math.ceil(timeDiff / (1000 * 60 * 60 * 24));
            console.log(`D-${daysRemaining}`);

            const li = document.createElement("li");
            li.className +=
              "list-group-item d-flex justify-content-between align-items-center";
            li.innerHTML = `<span style="font-weight: bold;">${i.title} </span><span>D-${daysRemaining}</span><a href="/parties/${i.num}/${i.host}" style="text-decoration: none;
            color: darkgray;"> 자세히</a>`;
            let a1 = li.querySelector("a");
            a1.addEventListener("mouseover", function () {
              // hover 시 적용할 스타일을 여기에 정의하세요
              a1.style.textDecoration = "underline";
              a1.style.color = "black";
              a1.style.fontWeight = "bold";
            });
            a1.addEventListener("mouseout", function () {
              // hover 종료 시 원래 스타일로 돌아가게 하려면
              a1.style.textDecoration = "none";
              a1.style.color = "darkgray";
            });
            myRoomTitle.appendChild(li);
          }
        });
      }

      function chatList() {
        // const main = document.querySelector("#main");
        // const body = document.querySelector("#body");
        // const chatListButton = document.querySelector("#chatListButton");
        // chatListButton.hidden = true;
        // main.hidden = false;
        // body.hidden = true;
        // msg.innerHTML = "";
        // notice.innerHTML = "";
        location.href = "/chat";
      }

      let participantID = "";
      let partyNum = "";

      function roomEnter(name) {
        console.log(name);
        const roomName = name;
        roomid123 = name;
        const userName = userId;
        document.querySelector(
          "#exitButton"
        ).innerHTML = `<button style="width: 150px;opacity:60%;height: 34px;margin-left: 1%;margin-top: 4px;padding: 4px 4px;margin-bottom: 5px;"
                  id="chatListButton"
                  onclick="chatList()"
                  class="btn btn-secondary"
                >
                  채팅 목록
                </button>
                <button style="opacity:60%;width: 100px;height: 34px;margin-left: 66%;margin-top: 4px;padding: 4px 4px;margin-bottom: 5px"; onclick="exitChatRoom(\'${name}\')" class="btn btn-danger">나가기</button>`;
        console.log(roomName, userName);
        socket.emit(
          "create",
          roomName,
          userName,
          partiesId,
          partiesDataId,
          (res1) => {
            const res = res1.beforeChat;
            const host_id = res1.chatData.host_id;
            participantID = res1.chatData.participant_id;
            partyNum = res1.chatData.party_num;
            console.log(res); //이전 채팅 내용
            const main = document.querySelector("#main");
            const body = document.querySelector("#body");
            const chatListButton = document.querySelector("#chatListButton");
            chatListButton.hidden = false;
            main.hidden = true;
            body.hidden = false;

            //이전 메세지 띄우기
            if (res) {
              for (let i = 0; i < res.length; i++) {
                const div = document.createElement("div");
                const p = document.createElement("p");
                const span = document.createElement("span");
                if (res[i].send_id === userId) {
                  //내가입력한 텍스트
                  div.classList.add("my-chat");
                  p.textContent = `${res[i].send_message}`;
                  span.innerHTML = `${res[i].send_time}`;
                  div.appendChild(span);
                  div.appendChild(p);
                  msg.appendChild(div);
                } else {
                  div.classList.add("other-chat");
                  span.innerHTML = `${res[i].send_time}`;
                  div.innerHTML = `<img src="${res[i].imgURL}" alt="${res[i].send_id}" id="chatProfile">`;
                  p.textContent = `${res[i].send_message}`;
                  div.appendChild(p);
                  div.appendChild(span);
                  msg.appendChild(div);
                }

                //개인메세지일때 bool이 true
                // if (bool) {
                //   div.classList.add("secret-chat");
                // }
                //채팅 텍스트
              }
            }
            if (userId == host_id) {
              document.querySelector("#invite").hidden = false;
            }
            prepareScroll();
          }
        );
      }

      // function invite() {
      //   const par = participantID.split(",");
      //   let otherID = "";
      //   for (let i = 1; i < par.length; i++) {
      //     if (par[i] != userId) {
      //       otherID = par[i];
      //       break;
      //     }
      //   }
      //   console.log("invite", otherID, partyNum);
      //   const ID = `단톡 게시글번호:${partyNum}`;
      //   socket.emit("create", ID, userId, partyNum, `단톡 ${userId}`, () => {
      //     console.log("방장 단톡 생성 완료");
      //     invite2(otherID);
      //   });
      // }

      // function invite2(otherID) {
      //   console.log(roomid123);
      //   const ID = `단톡 게시글번호:${partyNum}`;
      //   socket.emit("create", ID, otherID, partyNum, `단톡 ${userId}`, () => {
      //     console.log("초대 단톡 생성 완료");
      //     const msg = {
      //       nick: userId,
      //       user: "all",
      //       message: `${otherID} 단톡방 초대 완료! 채팅목록을 확인해주세요!`,
      //       room: roomid123,
      //     };
      //     socket.emit("sendMessage", msg);
      //   });
      // }

      async function invite() {
        const par = participantID.split(",");
        let otherID = "";
        for (let i = 1; i < par.length; i++) {
          if (par[i] != userId) {
            otherID = par[i];
            break;
          }
        }
        console.log("invite", otherID, partyNum);
        const ID = `단톡 게시글번호:${partyNum}`;

        try {
          await new Promise((resolve, reject) => {
            socket.emit(
              "create",
              ID,
              userId,
              partyNum,
              `단톡 ${userId}`,
              () => {
                console.log("방장 단톡 생성 완료");
                resolve();
                // invite2(otherID);
                setTimeout(function () {
                  invite2(otherID);
                }, 100);
              }
            );
          });
        } catch (error) {
          console.error("Error in invite:", error);
        }
      }

      async function invite2(otherID) {
        console.log(roomid123);
        const ID = `단톡 게시글번호:${partyNum}`;

        try {
          await new Promise((resolve, reject) => {
            socket.emit(
              "create",
              ID,
              otherID,
              partyNum,
              `단톡 ${userId}`,
              () => {
                console.log("초대 단톡 생성 완료");
                resolve();
              }
            );
          });

          const msg = {
            nick: userId,
            user: "all",
            message: `${otherID} 단톡방 초대 완료! 채팅목록을 확인해주세요!`,
            room: roomid123,
          };

          await new Promise((resolve, reject) => {
            socket.emit("sendMessage", msg, () => {
              resolve();
            });
          });
        } catch (error) {
          console.error("Error in invite2:", error);
        }
      }

      // let roomName1 = "";
      // const chatData = "<%= partiesNum %>";
      // const partiesId = chatData.split(",")[0];
      // const wrtieId = chatData.split(",")[1];
      // // const userId = sessionStorage.getItem("userId");
      // if (wrtieId > userId) {
      //   roomName1 = `${wrtieId}${userId}`;
      // } else {
      //   roomName1 = `${userId}${wrtieId}`;
      // }
      // console.log(partiesId, wrtieId, userId, roomName1);

      //소켓
      const chatForm = document.querySelector("#chatFormButton");
      let msg = document.querySelector("#messages");
      let notice = document.querySelector("#notice");

      let myName;

      // //룸리스트
      // socket.emit("roomList", userId, (roomList) => {
      //   console.log("roomList", roomList);
      //   const lists = document.querySelector("#lists");
      //   lists.textContent = "";
      //   roomList.forEach((roomList) => {
      //     const li = document.createElement("li");
      //     li.innerHTML = `roomName: ${roomList.roomName} chatName: ${roomList.participant} <button id="chatroom">채팅방입장</button>`;
      //     lists.appendChild(li);
      //   });
      // });

      //사용자 리스트
      socket.on("userList", (userLists) => {
        console.log(userLists);
        // const lists = document.querySelector("#userList");
        // lists.textContent = "";
        // let options = `<option value="all">전체</option>`;
        // for (let i of userLists) {
        //   options += `<option value="${i.key}">${i.name}</option>`;
        // }
        // lists.innerHTML = options;
      });

      //메세지 띄우기
      socket.on("newMessage", (message, nick, time, imgURL, bool) => {
        console.log(message, nick);
        const div = document.createElement("div");
        const p = document.createElement("p");
        const span = document.createElement("span");
        span.innerText = time;
        if (userId === nick) {
          //내가입력한 텍스트
          div.classList.add("my-chat");
          p.textContent = bool ? `(귓속말) ${nick} : ${message}` : `${message}`;
          div.appendChild(span);
          div.appendChild(p);
          msg.appendChild(div);
        } else {
          div.classList.add("other-chat");
          div.innerHTML = `<img src="${imgURL}" alt="${nick}" id="chatProfile">`;
          p.textContent = bool ? `(귓속말) ${nick} : ${message}` : `${message}`;
          div.appendChild(p);
          div.appendChild(span);
          msg.appendChild(div);
        }
        prepareScroll();
      });
      //입장 메세지 이벤트
      socket.on("notice", (message) => {
        notice.innerHTML = `<div><p>${message}</p></div>`;
      });

      chatForm.addEventListener("click", (e) => {
        console.log(roomid123);
        // e.preventDefault();
        const message = document.querySelector("#message");
        if (message.value == "") {
          return;
        } else {
          const msg = {
            nick: userId,
            user: "all",
            message: message.value,
            room: roomid123,
          };
          socket.emit("sendMessage", msg);
          message.value = "";
          prepareScroll();
        }
      });

      // function exitChatRoom(roomname) {
      //   const msg = {
      //     nick: userId,
      //     user: "all",
      //     message: `${userId}님이 퇴장하였습니다.`,
      //   };
      //   socket.emit("sendMessage", msg)
      //   socket.emit("disconnect1", userId, roomname, (res) => {
      //     if (res) {
      //       console.log("나가기 완료", res);
      //       location.href = "/chat";
      //     } else {
      //       console.log("나가기 실패");
      //     }
      //   });
      // }

      async function exitChatRoom(roomname) {
        try {
          const msg = {
            nick: userId,
            user: "all",
            message: `${userId}님이 퇴장하였습니다.`,
            room: roomid123,
          };
          await socket.emit("sendMessage", msg);
          const res = await new Promise((resolve) => {
            socket.emit("disconnect1", userId, roomname, (result) => {
              resolve(result);
            });
          });
          if (res) {
            console.log("나가기 완료", res);
            location.href = "/chat";
          } else {
            console.log("나가기 실패");
          }
        } catch (error) {
          console.error(error);
        }
      }

      // 준비 함수, 약간의 시간을 두어 scroll 함수를 호출하기
      function prepareScroll() {
        window.setTimeout(scrollUl, 50);
      }

      // scroll 함수
      function scrollUl() {
        // 채팅창 form 안의 ul 요소, (ul 요소 안에 채팅 내용들이 li 요소로 입력된다.)
        let chatUl = document.querySelector("#msg");
        chatUl.scrollTop = chatUl.scrollHeight; // 스크롤의 위치를 최하단으로
      }
    </script>
  </body>
</html>
